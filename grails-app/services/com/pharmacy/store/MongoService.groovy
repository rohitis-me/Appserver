package com.pharmacy.store

import grails.transaction.Transactional


@Transactional
class MongoService {

    def serviceMethod() {

    }
	
	def getCurrentDate() {
		return (new Date())
	}
	
	//Methods for billing
	
	def insertOrUpdateBill(BillingCommand bill) {
		log.info "in insertOrUpdateBill"
		if(validateBill(bill)) {
			def billing= new Billing()
			billing= populateBillingFromBillingCommand(billing, bill)// assumes billing ID is generated by the client
			if(billing.save(flush:true)) {
				log.info "Billing saved: "+billing.properties
			} else {
			log.error "Billing NOT saved: "+billing.properties
			}
			
		} else {
		  println "BILL NOT VALID: "+bill
		}
	}
	
	def getLastUpdatedTimeStampForBilling(String storeId) {
		println "STOREID: "+storeId
		Billing bill = Billing.findByStoreId(storeId, [sort:"lastUpdatedTimeStamp", order: "desc"])
		long timeStamp = bill?.lastUpdatedTimeStamp?:0
		log.info "timestamp: "+timeStamp+" billList: "+bill+" billing count: "+Billing.count()
		return timeStamp
		
	}
	
	private boolean validateBill(BillingCommand bill) {
		//validate billing fields
		boolean isValid= true;
		
		if(bill.getBillingTime()> getCurrentDate()) {
			isValid = false
		}
		if(bill.getQuantity()< 0) {
			isValid = false
		}
		 
		return isValid
	}
	
	def populateBillingFromBillingCommand(Billing bill, BillingCommand billingCommand) {
		//TODO..
		bill = new Billing()
		bill.billingId = billingCommand.getBillingId()
		bill.billingNumber = billingCommand.getBillingNumber()
		bill.storeId = billingCommand.getStoreId()
		bill.brandId = billingCommand.getBrandId()
		bill.batch = billingCommand.getBatch()
		bill.billingTime = billingCommand.getBillingTime()
		bill.quantity = billingCommand.getQuantity()
		bill.discount = billingCommand.getDiscount()
		bill.sellingPrice = billingCommand.getSellingPrice()
		bill.isDeleted = billingCommand.isDeleted()
		bill.lastUpdatedTimeStamp = billingCommand.getLastUpdatedTimeStamp()
		return bill
	}
	
	//Methods for inventory
	
	def insertOrUpdateInventory(InventoryCommand item) {
		if(validateInventory(item)) {
			log.info "ITEM valid"
			def inventory= new Inventory()
			inventory= populateInventoryFromInventoryCommand(inventory, item)
			if(inventory.save(flush:true)) {
				log.info "Item saved: "+item.properties
			} else {
				log.error "Item NOT saved"
			}
		}
	}
	
	def getLastUpdatedTimeStampForInventory(String storeId) {
		log.info "storeid: "+storeId
		
		Inventory item = Inventory.findByStoreId(storeId, [sort:"lastUpdatedTimeStamp", order: "desc"])
		long timeStamp = item?.lastUpdatedTimeStamp?:0
		return timeStamp
	}
	
	private boolean validateInventory(InventoryCommand item) {
		//validate inventory fields
		boolean isValid= true;
		
		if(item.getItemsPerUnit() < 0) {
			isValid = false
		}
		if(item.getQuantity()< 0) {
			isValid = false
		}
		 
		return isValid
	}
	
	def populateInventoryFromInventoryCommand(Inventory item, InventoryCommand inventoryCommand) {
		item = new Inventory()
		item.inventoryId = inventoryCommand.getInventoryId()
		item.brandId = inventoryCommand.getBrandId()
		item.storeId = inventoryCommand.getStoreId()
		item.batch = inventoryCommand.getBatch()
		item.expiry = inventoryCommand.getExpiry()
		item.unitCost = inventoryCommand.getUnitCost()
		item.mrp = inventoryCommand.getMrp()
		item.quantity = inventoryCommand.getQuantity()
		item.discount = inventoryCommand.getDiscount()
		item.itemsPerUnit = inventoryCommand.getItemsPerUnit()
		item.isDeleted = inventoryCommand.isDeleted()
		item.lastUpdatedTimeStamp = inventoryCommand.getLastUpdatedTimeStamp()
		return item
	}
	
}
